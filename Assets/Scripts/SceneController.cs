using System.CodeDom;
using System.Collections;
using System.Collections.Generic;
using System.Security.Cryptography.X509Certificates;
using System.Threading;
using UnityEngine;
using UnityEngine.UI;
using TMPro;
using System;

public class SceneController : MonoBehaviour
{
    //Custom scripts
    [Header("Scripts")]
    [SerializeField] CarController[] cars;
    [SerializeField] BusStopController[] stops;
    [SerializeField] CircuitGenerator grid;

    //Canvas elements
    [Header("Canvas Elements")]
    [SerializeField] TMP_InputField[] fields;
    [SerializeField] Slider speedSlider;
    [SerializeField] TextMeshProUGUI totVoltageLabel;

    

    //Circuit Values
    [Header("Circuit Values")]
    [SerializeField] float[] currentValues;
    [SerializeField] float[] voltAnswers;
    [SerializeField] float[] resistValues;

    //World Values
    [Header("World Values")]
    [SerializeField] float startSpeed = 1;
    [SerializeField] float totVoltage;
    [SerializeField] public static float difficulty;
    

//Main Methods
    void Start()
    {
        SetUpField();
        FindObjects();
        AssignStartingValues();
    }

    void Update()
    {
        UpdateValues();
        CheckValues();
    }
     
//Custom Methods

    //Updates the currents and speeds of the cars
    public void UpdateValues()
    {
        UpdateCurrents();
        UpdateSpeeds();
    }

    //Finds the CircuitGenerator and sets up the field
    private void SetUpField()
    {
        //Generate tbe field
        UnityEngine.Debug.Log(difficulty);
        grid = FindObjectOfType<CircuitGenerator>();
        grid.SetUpField(SceneController.difficulty); 
    }

    //As
    public void AssignStartingValues()
    {
        currentValues = new float[fields.Length];
        
        foreach (TMP_InputField currentInput in fields)
        {
            if (System.Array.IndexOf(fields, currentInput) >= cars.Length)
            {
                currentInput.gameObject.SetActive(false);
            }
        }
        
        var i = 0;
        foreach (TMP_InputField field in fields)
        {
            currentValues[i] = float.Parse(field.text);
            i++;
        }
        
        i = 0;
        Dictionary<BusStopController, float> resistorCurrents = SolveCircuit(stops, totVoltage);
        foreach (BusStopController busStop in stops)
        {
           
            //busStop.SetLabelText(resistValues[i].ToString());         
            busStop.SetVoltageKey(resistorCurrents[busStop]);
            i++;
        }
        speedSlider.value = startSpeed;

        totVoltageLabel.text = totVoltage.ToString();

    }

    //Finds all of the objects that were generated by the circuit generator
    public void FindObjects()
    {
        //Find Cars
        cars = FindObjectsOfType<CarController>();
        System.Array.Reverse(cars);
        //Find Bus Stops
        stops = CollectBusStops();

        //Find Sliders
        speedSlider = FindObjectOfType<Slider>();

        //Find Input Fields
        //fields = FindObjectsOfType<TMP_InputField>();

        
        //Find Labels
        totVoltageLabel = GameObject.FindWithTag("totalVoltage").GetComponent<TextMeshProUGUI>();

        
    }

    //Prepares the BusStops on the field to be in an order accessible by the Circuit solver class
    public BusStopController[] CollectBusStops()
    {
        BusStopController[] stops = FindObjectsOfType<BusStopController>();
        System.Array.Reverse(stops);
        return stops;
    }

    

    
    //Allows the SceneControllerScript to access the SolveLinearCircuit method of Circuit Solver
    public Dictionary<BusStopController, float> SolveCircuit(BusStopController[] resistors, float voltage)
    {
        return CircuitSolver.SolveLinearCircuit(resistors, voltage);
    }

    //Checks the voltage value to make sure that there's not too much voltage in the circuit
    public void CheckValues()
    {
        var combVolt = 0f;
        foreach (float voltage in currentValues)
        {
            combVolt += voltage;
        }
        
        if (combVolt > totVoltage)
        {
            UnityEngine.Debug.Log("There's too much voltage in the system");
            //totVoltageLabel.color = new Color32(255, 128, 0, 255);
        }
        else
        {
            //totVoltageLabel.color = new Color32(255, 255, 255, 255);
        }
    }

    //Updates the displayed currents based on the values given in the text fields
    public void UpdateCurrents()
    {
        var i = 0;

        //Updates the list of current values based on the input from the text fields
        foreach (TMP_InputField field in fields)
        {
            if (field.text != "" )
            {
                currentValues[i] = float.Parse(field.text);
                i++;
            }
            if (field.text == "")
            {

                currentValues[i] = 0;
                i++;
            }
        }

        i = 0;

        //Updates the text on the cars to reflect the current values inside of the text fields
        foreach (CarController car in cars)
        {
            //UnityEngine.Debug.Log(car);
            car.SetLabelText(currentValues[i].ToString());
            i++;
        }
    }

//Accessors and Mutators

    public CarController[] GetCars()
    {
        return cars;
    }

    public BusStopController[] GetStops()
    {
        return stops;
    }

    public TMP_InputField[] GetFields()
    {
        return fields;
    }

    public float GetStartSpeed()
    {
        return startSpeed;
    }

    public float GetTotVoltage()
    {
        return totVoltage;
    }

    public void UpdateSpeeds()
    {
        Time.timeScale = speedSlider.value;
    }
}
